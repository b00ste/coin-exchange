{"version":3,"sources":["Components/logo.svg","Components/AccountBalance.jsx","Components/Coin.jsx","Components/CoinList.jsx","Components/HeaderComp.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Section","styled","section","AccountBalance","props","showBalance","amount","onClick","toggleBalance","Td","td","Coin","name","ticker","price","balance","action","method","event","preventDefault","handleRefresh","tickerId","Table","table","CoinList","coinData","map","key","Header","header","HeaderComp","src","logo","alt","className","Component","Div","div","formatPrice","parseFloat","Number","toFixed","App","useState","setShowBalance","setCoinData","componentDidMount","a","axios","get","res","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","USD","useEffect","length","valueChangeId","newPrice","newCoinData","values","newValues","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ffa1bc66.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Section = styled.section`\r\n    font-size: 2rem;\r\n    text-align: left;\r\n    padding: 1.5rem 0rem 1.5rem 3rem;\r\n`;\r\n\r\nfunction AccountBalance(props) {\r\n    return (\r\n        <Section>\r\n            {props.showBalance ? <>Balance: ${props.amount}</> : null}\r\n            <button onClick={props.toggleBalance} >{props.showBalance ? \"Hide Balance\" : \"Show Balance\"}</button>\r\n        </Section>\r\n    );\r\n}\r\n\r\nAccountBalance.propTypes = {\r\n    amount: PropTypes.number.isRequired\r\n}\r\n\r\nexport default AccountBalance;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Td = styled.td`\r\n    border-top: 1px solid #cccccc;\r\n    width: 25vh;\r\n`;\r\n\r\nfunction Coin(props) {\r\n\r\n    const handleClick = (event) => {\r\n        event.preventDefault();\r\n        props.handleRefresh(props.tickerId);\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <Td>{props.name}</Td>\r\n            <Td>{props.ticker}</Td>\r\n            <Td>${props.price}</Td>\r\n            {props.showBalance ? <Td>{props.balance}</Td> : null}\r\n            <Td>\r\n                <form action=\"#\" method=\"POST\">\r\n                    <button onClick={handleClick}>\r\n                        Refresh\r\n                    </button>\r\n                </form>\r\n            </Td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nCoin.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    ticker: PropTypes.string.isRequired,\r\n    price: PropTypes.number.isRequired\r\n}\r\n\r\nexport default Coin;","import React from 'react'\r\nimport styled from 'styled-components';\r\nimport Coin from './Coin.jsx';\r\n\r\nconst Table = styled.table`\r\n    margin: 50px auto 50px auto;\r\n    display: inline-block;\r\n    font-size: 1.4rem;\r\n`;\r\n\r\nfunction CoinList(props) {\r\n    return (\r\n        <Table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Ticker</th>\r\n                    <th>Price</th>\r\n                    {props.showBalance ? <th>Balance</th> : null}\r\n                    <th>Actions</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                props.coinData.map( ({key, name, ticker, price, balance}) => \r\n                    <Coin \r\n                        key={key}\r\n                        name={name} \r\n                        ticker={ticker} \r\n                        price={price}\r\n                        balance={balance}\r\n                        tickerId={key}\r\n                        handleRefresh={props.handleRefresh}\r\n                        showBalance={props.showBalance}\r\n                    />\r\n                )\r\n                }\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default CoinList;","import React, { Component } from 'react'\r\nimport styled from 'styled-components';\r\nimport logo from './logo.svg';\r\n\r\nconst Header = styled.header`\r\n    background-color: #282c34;\r\n    min-height: 20vh;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    color: white;\r\n\r\n    .App-logo {\r\n        height: 8rem;\r\n        pointer-events: none;\r\n    }\r\n    \r\n    .App-title\r\n    {\r\n        font-size: 4rem;\r\n    }\r\n`;\r\n\r\nexport default class HeaderComp extends Component {\r\n    render() {\r\n        return (\r\n        <Header>\r\n            <img src={logo} alt=\"React logo\" className=\"App-logo\" />\r\n            <h1 className=\"App-title\">\r\n                Coin Exchange\r\n            </h1>\r\n        </Header>\r\n        )\r\n    }\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios'\nimport AccountBalance from './Components/AccountBalance.jsx';\nimport CoinList from './Components/CoinList.jsx';\nimport HeaderComp from './Components/HeaderComp.jsx';\n\nconst Div = styled.div`\n  text-align: center;\n  background-color: rgba(10, 83, 151, 0.712);\n  color: #cccccc;\n  .hide {\n      display: none\n  }\n`;\n\nconst COIN_COUNT = 10;\n\nconst formatPrice = (price) => parseFloat(Number(price).toFixed(4));\n\nfunction App(props) {\n\n  const [balance, setBalance] = useState(10000);\n  const [showBalance, setShowBalance] = useState(false)\n  const [coinData, setCoinData] = useState([])\n\n  const componentDidMount = async () => {\n    const res = await axios.get('https://api.coinpaprika.com/v1/coins');\n\n    const coinIds = res.data.slice(0, COIN_COUNT).map(coin => coin.id);\n\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n    const promises = coinIds.map(id => axios.get(tickerUrl + id));\n    const coinData = await Promise.all(promises);\n\n    const coinPriceData = coinData.map( res => {\n      const coin = res.data;\n      return {\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        price: formatPrice(coin.quotes.USD.price),\n        balance: 0\n      };\n    });\n    setCoinData(coinPriceData);\n  }\n\n\n  useEffect(() => {\n    if(coinData.length === 0){\n      componentDidMount();\n    }\n  });\n\n  const handleRefresh = async (valueChangeId) => {\n    const res = await axios.get('https://api.coinpaprika.com/v1/tickers/' + valueChangeId);\n    const coin = res.data;\n    const newPrice = formatPrice(coin.quotes.USD.price);\n    const newCoinData = coinData.map( ( values /*{ticker, name, price, balance}*/ ) => {\n      let newValues = { ...values };\n      if(valueChangeId === values.key)\n      {\n        newValues.price = newPrice;\n      }\n      return newValues;\n    });\n    setCoinData(newCoinData);\n  }\n\n  const toggleBalance = () => {\n    setShowBalance(!showBalance);\n  }\n\n  return (\n    <Div>\n      <HeaderComp /> \n      <AccountBalance amount={balance} showBalance={showBalance} toggleBalance={toggleBalance} />\n      <CoinList coinData={coinData} handleRefresh={handleRefresh} showBalance={showBalance} />\n    </Div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}